#include <iostream>
#include <vector>
#include <list>

using namespace std;

class Graph {
public:
    int V; // Number of vertices
    vector<list<int>> adjList; // Vector of lists for adjacency list representation

    // Constructor
    Graph(int vertices) {
        V = vertices;
        adjList.resize(V); // Resize the vector to hold V lists
    }

    // Function to add an undirected edge between u and v
    void addEdge(int u, int v) {
        adjList[u].push_back(v); // Add v to the adjacency list of u
        adjList[v].push_back(u); // Add u to the adjacency list of v (because it's undirected)
    }

    // Function to print the adjacency list
    void printAdjList() {
        for (int i = 0; i < V; i++) {
            cout << i << ": ";
            for (int v : adjList[i]) {
                cout << v << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Graph g(4); // Create a graph with 4 vertices

    g.addEdge(0, 1); // Add undirected edge between vertex 0 and vertex 1
    g.addEdge(1, 2); // Add undirected edge between vertex 1 and vertex 2
    g.addEdge(2, 3); // Add undirected edge between vertex 2 and vertex 3
    g.addEdge(3, 0); // Add undirected edge between vertex 3 and vertex 0

    cout << "Adjacency List for Undirected Graph:" << endl;
    g.printAdjList();

    return 0;
}
